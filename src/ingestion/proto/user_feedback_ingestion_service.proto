syntax = "proto3";

package e8;

message RatingFeedback {
  // ID of the user who sent the rating feedback.
  int64 user_id = 1;

  // ID of the piece of content which was rated on.
  int64 content_id = 2;

  // In unix timestamp.
  int64 timestamp_secs = 3;

  // From 0.5 to 5.0. Step unspecified.
  float rating = 4;
}

message RecordRatingFeedbacksRequest {
  // The list of rating feedbacks to be recorded.
  repeated RatingFeedback rating_feedbacks = 1;
}

message RecordRatingFeedbacksResponse {}

message TaggingFeedback {
  // ID of the user who sent the tagging feedback.
  int64 user_id = 1;

  // ID of the piece of content which was tagged on.
  int64 content_id = 2;

  // In unix timestamp.
  int64 timestamp_secs = 3;

  // Arbitrary text.
  string tag = 4;
}

message RecordTaggingFeedbacksRequest {
  // The list of tagging feedbacks to be recorded.
  repeated TaggingFeedback tagging_feedbacks = 1;
}

message RecordTaggingFeedbacksResponse {}

service UserFeedbackIngestion {
  // Records a list of user rating feedbacks to pieces of content. It
  // overwrites any existing entries keyed by (user_id, content_id,
  // timestamp_secs).
  rpc RecordRatingFeedbacks(RecordRatingFeedbacksRequest)
      returns (RecordRatingFeedbacksResponse);

  // Records a list of user tagging feedbacks to pieces of content. It
  // overwrites any existing entries keyed by (user_id, content_id, tag).
  rpc RecordTaggingFeedbacks(RecordTaggingFeedbacksRequest)
      returns (RecordTaggingFeedbacksResponse);
}
